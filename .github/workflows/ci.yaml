name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      IMAGE_FRONTEND: ${{ secrets.DOCKER_USERNAME }}/devops-frontend
      IMAGE_BACKEND: ${{ secrets.DOCKER_USERNAME }}/devops-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build frontend Docker image
        run: |
          docker build -t techietech/devops-frontend:latest ./Application-Code/frontend
          docker push techietech/devops-frontend:latest

      - name: Build backend Docker image
        run: |
          docker build -t techietech/devops-backend:latest ./Application-Code/backend
          docker push techietech/devops-backend:latest

      - name: Set up kubeconfig
        shell: powershell
        run: |
          if (-Not (Test-Path "$HOME\.kube")) {
            New-Item -ItemType Directory -Path "$HOME\.kube" | Out-Null
          }
          $decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.KUBE_CONFIG }}"))
          Set-Content -Path "$HOME\.kube\config" -Value $decoded

      - name: Deploy Frontend via Helm
        run: |
          helm upgrade --install frontend-chart ./helm/frontend-chart --namespace devops-project --create-namespace

      - name: Deploy Backend via Helm
        run: |
          helm upgrade --install backend-chart ./helm/backend-chart --namespace devops-project --create-namespace

      - name: Deploy MongoDB via Helm
        run: |
          helm upgrade --install mongo-chart ./helm/mongo-chart --namespace devops-project --create-namespace

      - name: Deploy Ingress via Helm
        run: |
          helm upgrade --install ingress-chart ./helm/ingress --namespace devops-project --create-namespace


      - name: Install Prometheus via Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace

      - name: Install Grafana via Helm (Local Chart with values)
        run: |
          helm upgrade --install grafana ./helm/grafana-chart --namespace monitoring --create-namespace `
            -f ./helm/grafana-chart/values.yaml

      - name: Post-deploy health check
        shell: powershell
        run: |
          try {
          $resp = Invoke-WebRequest -Uri http://devops.local/healthz -UseBasicParsing
          if ($resp.StatusCode -ne 200) {
            Write-Host "Health check failed with status: $($resp.StatusCode)"
            Write-Host "Response content:"
            Write-Host $resp.Content
            throw "Health check failed"
          } else {
            Write-Host "Health check passed: $($resp.StatusCode)"
          }
          } catch {
            Write-Host "Exception during health check:"
            Write-Host $_.Exception.Message
            throw
          }


